{"version":3,"sources":["components/Melow.js","components/TitleHeader.js","components/TaskHeader.js","models/Store.js","App.js","index.js"],"names":["Melow","props","co","state","width","height","maxRadius","updateWindowDimensions","bind","this","updateCanvas","window","addEventListener","removeEventListener","canvas","document","getElementById","offsetTop","relativeHeight","innerHeight","relativeWidth","innerWidth","Math","min","setState","ctx","refs","getContext","cx","cy","PI2","PI","scale","outerRadius","clearRect","beginPath","arc","fillStyle","fill","stroke","closePath","moveTo","innerRadius","id","ref","Component","TitleHeader","className","TaskHeader","store","startWeight","round","startWaterPercent","currentWaterPercent","currentWeight","toFixed","cbrt","observable","computed","App","observer","changeWaterPercent","changeStartWeight","evt","value","Slider","onChange","max","orientation","valueLabelDisplay","action","ReactDOM","render"],"mappings":"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","file":"static/js/main.84705d04.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport '../App.scss';\nexport default class Melow extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            width:0,\n            height:0,\n            maxRadius:1\n        }\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n      this.updateWindowDimensions();\n      this.updateCanvas();\n      window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const canvas = document.getElementById(\"canvas\");\n        const offsetTop = canvas ? canvas.offsetTop: 0;\n        const relativeHeight = window.innerHeight - offsetTop - 50; //TODO add delta for (offsetBottom?)\n        const relativeWidth = window.innerWidth - 50; //TODO add delta for (offsetLeft?)\n        const maxRadius = Math.min(relativeHeight, relativeWidth) * 0.5 * 0.7;\n        \n        this.setState({ \n            width: relativeWidth, \n            height: relativeHeight,\n            maxRadius: maxRadius\n        });\n    }\n    \n    co\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const ctx = this.refs.canvas.getContext('2d');\n        const cx = this.state.width/2;\n        const cy = this.state.height/2;\n        const PI2 = Math.PI * 2;\n        const scale =  this.state.maxRadius / this.props.outerRadius;\n        \n        ctx.clearRect(0, 0, this.state.width, this.state.height);\n\n        ctx.beginPath();\n        ctx.arc(cx, cy, this.state.maxRadius, 0, PI2, true); \n        ctx.fillStyle = 'green';\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.moveTo(cx, cy);\n        ctx.beginPath();\n        ctx.arc(cx, cy, this.props.innerRadius * scale, 0, PI2, true); \n        ctx.fillStyle = 'red';\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    render() {\n        return (\n            <canvas id=\"canvas\" ref=\"canvas\" width={this.state.width} height={this.state.height}/>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport '../App.scss';\nexport default class TitleHeader extends Component {\n    render(){\n        return(\n            <div className =\"title-header\"><h1>Задача про вес арбуза</h1></div>\n        ); \n    }\n}\n","import React, { Component } from \"react\";\nimport '../App.scss';\n\nexport default class TaskHeader extends Component {\n    render(){\n        return(\n            <div className=\"task-header\">\n                <h2>\n                    Начальный вес: <span className=\"values\">{this.props.store.startWeight} кг</span><br/>\n                    Начальный процент воды: <span className=\"values\">{Math.round(this.props.store.startWaterPercent * 100)}%</span><br/>\n                    Текущий процент воды: <span className=\"values\">{Math.round(this.props.store.currentWaterPercent * 100)}%</span><br/>\n                    Текущий вес арбуза: <span className=\"values\">{this.props.store.currentWeight.toFixed(2)} кг</span>\n                </h2>\n             </div>\n        ); \n    }\n}","import { observable, computed } from \"mobx\";\n\nclass Store {\n    @observable startWaterPercent = 0.99;\n    @observable startWeight = 100;   \n    @observable currentWaterPercent = 0.7;\n\n    @computed get currentWeight() {\n       /*  \n        var startCrustPercent = 1 - this.startWaterPercent;\n        var crustWeight = this.startWeight * startCrustPercent;\n        var result = crustWeight  / (1 - this.currentWaterPercent);\n        return result; \n        */\n        return this.startWeight * (1 - this.startWaterPercent) / (1 - this.currentWaterPercent);\n    }\n\n    @computed get innerRadius(){\n        return Math.cbrt(0.00024 * this.currentWeight * this.currentWaterPercent);\n    }\n\n    @computed get outerRadius(){\n        // V = 4/3 * PI * R^3\n        // M = PV, P считаем равной 1000 кг/m3 -> V = M/1000 = 4/3 * PI * R^3\n        // R = sqrt3(M/(4/3 * PI * 1000))\n        return Math.cbrt(0.00024 * this.currentWeight);\n    }\n}\n//Singleton\nexport default new Store();\n","import React, { Component } from \"react\";\nimport {observer} from \"mobx-react\";\nimport {action} from \"mobx\";\n\nimport Melow from \"./components/Melow\";\nimport TitleHeader from \"./components/TitleHeader\";\nimport TaskHeader from \"./components/TaskHeader\";\nimport store from \"./models/Store\"\nimport Slider from '@material-ui/core/Slider';\n\nimport './App.scss';\n\n\nexport default @observer class App extends Component {\n    constructor(props){\n      super(props);\n      this.changeWaterPercent =  this.changeWaterPercent.bind(this);\n      this.changeStartWeight =  this.changeStartWeight.bind(this);\n    }\n\n    @action changeWaterPercent(evt, value){\n      store.currentWaterPercent = value / 100;\n    } \n\n    @action changeStartWeight(evt, value){\n      store.startWeight = value;\n    } \n\n    render() {\n        return (\n          <>\n            <div id=\"maket\">\n                <TitleHeader/>\n                <TaskHeader store={store}/>\n                <div id=\"left\">\n                  <Slider \n                    id=\"weightSlider\" \n                    onChange={this.changeStartWeight} \n                    min={1} \n                    max={1000} \n                    value={store.startWeight}\n                    orientation=\"vertical\"\n                    valueLabelDisplay=\"on\"\n                  />\n                </div>\n                <Melow \n                  innerRadius={store.innerRadius} \n                  outerRadius={store.outerRadius}\n                />\n            </div>\n            <div id=\"footer\">\n              <Slider \n                id=\"waterSlider\" \n                onChange={this.changeWaterPercent} \n                min={1} \n                max={99} \n                value={store.currentWaterPercent * 100}\n                valueLabelDisplay=\"on\"\n              />\n            </div>\n          </>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}