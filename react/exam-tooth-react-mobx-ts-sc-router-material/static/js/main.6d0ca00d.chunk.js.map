{"version":3,"sources":["components/table/TablePaginationActions.tsx","components/table/RecordsTable.tsx","services/DataLoader.tsx","data/Store.tsx","App.tsx","index.tsx"],"names":["useStyles1","makeStyles","theme","createStyles","root","flexShrink","color","palette","text","secondary","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","StyledTableCell","withStyles","head","backgroundColor","common","black","white","body","fontSize","TableCell","useStyles","width","marginTop","table","minWidth","minHeight","tableWrapper","overflowX","RecordsTable","records","React","useState","setPage","setRowsPerPage","selectStringFragment","str","search","searchString","arr","split","length","map","value","style","Paper","padding","margin","onKeyDown","changeSearchString","Table","TableHead","TableRow","align","TableBody","height","slice","record","key","caseUid","component","scope","reference","accountId","creationDate","publicId","status","TableFooter","left","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","DataLoader","request","Promise","resolve","fetch","then","response","json","Store","this","filter","index","indexOf","observable","computed","App","observer","store","bind","load","data","initRecords","console","log","filteredRecords","Component","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d0ca00d.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles, createStyles, useTheme, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { TablePaginationActionsProps } from './TablePaginationActionsProps';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(2.5),\n    },\n  }),\n);\n\nexport default function TablePaginationActions(props: TablePaginationActionsProps) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n  function handleFirstPageButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, 0);\n  }\n  function handleBackButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, page - 1);\n  }\n  function handleNextButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, page + 1);\n  }\n  function handleLastPageButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n  return (<div className={classes.root}>\n    <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n      {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n    </IconButton>\n    <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n      {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n    </IconButton>\n    <IconButton onClick={handleNextButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"next page\">\n      {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n    </IconButton>\n    <IconButton onClick={handleLastPageButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"last page\">\n      {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n    </IconButton>\n  </div>);\n}\n","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePaginationActions from './TablePaginationActions';\nimport RecordData from '../../data/RecordData';\n\nexport const useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(2.5),\n    },\n  }),\n);\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }),\n)(TableCell);\n\nconst useStyles = makeStyles((theme: Theme) =>\ncreateStyles({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n    minHeight:200\n  },\n  tableWrapper: {\n    overflowX: 'auto'\n  },\n}),\n);\n\nexport default function RecordsTable(\n  props: {\n    records:RecordData[], \n    changeSearchString:(event:KeyboardEvent<HTMLInputElement>) =>void,\n    searchString:string\n  }\n    ) {\n  const records = props.records;\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  function handleChangePage(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n    newPage: number,\n  ) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n\n  function selectStringFragment(str:string,search:string = props.searchString){\n    const arr = str.split(search);\n    if (arr.length == 1) return (str);\n    return (\n      arr.map (value => \n        <span>\n          {value}\n          <span style={{color:\"red\"}}>\n            <b>{search}</b>\n          </span>\n        </span>\n      )\n    )\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        filter\n        <input \n          style={{padding:2, margin: 10}}\n          onKeyDown={(event:KeyboardEvent<HTMLInputElement>) => props.changeSearchString(event)}\n        />\n        <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>reference</StyledTableCell>\n            <StyledTableCell align=\"left\">caseUid</StyledTableCell>\n            <StyledTableCell align=\"left\">accountId</StyledTableCell>\n            <StyledTableCell align=\"left\">creationDate</StyledTableCell>\n            <StyledTableCell align=\"left\">publicId</StyledTableCell>\n            <StyledTableCell align=\"left\">status</StyledTableCell>\n          </TableRow>\n        </TableHead>\n          <TableBody style={{ height: 200}}>\n            {records.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(record => (\n              <TableRow key={record.caseUid}>\n                <TableCell component=\"th\" scope=\"row\">{record.reference}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.caseUid)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.accountId)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.creationDate)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.publicId)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.status)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableFooter style={{width:\"100%\", left:10}}>\n            <TableRow >\n              <TablePagination\n                rowsPerPageOptions={[5, 10, records.length]}\n                colSpan={3}\n                count={records.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","export default class DataLoader {\n    public static load<T>(request: RequestInfo): Promise<T> {\n        return new Promise((resolve) => {\n            fetch(request)\n            .then(response => response.json())\n            .then(body => {\n                resolve(body);\n            });\n        });\n    };\n}","import RecordData from \"../data/RecordData\";\nimport {observable, computed} from \"mobx\";\n\nexport default class Store {\n  @observable records:RecordData[] = [];\n  \n  @observable searchString:string = \"\";\n\n  init(records:RecordData[]){\n    this.records = records;\n  }\n\n  @computed get filteredRecords():RecordData[] {\n      if (this.searchString === \"\")\n        return this.records;\n\n      return this.records.filter(\n        (record:RecordData, index:number) => \n          (\n            record.accountId\n            +record.caseUid\n            +record.creationDate\n            +record.publicId\n            +record.reference\n            +record.status\n          ).indexOf(this.searchString) !== -1\n      )\n  } \n}","import React, { Component, KeyboardEvent } from \"react\";\nimport './App.css';\nimport RecordsTable from './components/table/RecordsTable';\nimport DataLoader from \"./services/DataLoader\"\nimport RecordData from \"./data/RecordData\";\nimport Store from \"./data/Store\";\nimport {observer} from \"mobx-react\";\nimport {action} from \"mobx\";\n\n@observer\nexport default class App extends Component {\n  store:Store = new Store();\n\n  componentDidMount(){\n    this.changeSearchString = this.changeSearchString.bind(this);\n\n    DataLoader.load<RecordData[]>('testData.json')\n      .then((data:RecordData[]) => this.initRecords(data));  \n  }\n\n  @action initRecords(data:RecordData[]) {\n    this.store.records = data;\n    console.log(data);\n    //this.forceUpdate();\n  }\n  \n  @action changeSearchString(event:KeyboardEvent<HTMLInputElement>){\n    if (event && event.key === \"Enter\") {\n      console.log(\"changeSearchString \",(event.target as HTMLInputElement).value,\" key:\", event.key);\n      this.store.searchString = (event.target as HTMLInputElement).value;\n      //this.forceUpdate();\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">          \n        <header className=\"App-header\">\n           <p>exam-tooth-react-mobx-ts-sc-router-material</p>\n           <RecordsTable \n              records={this.store.filteredRecords}\n              changeSearchString={this.changeSearchString}\n              searchString={this.store.searchString}\n           />\n        </header>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}