{"version":3,"sources":["components/table/TablePaginationActions.tsx","components/table/RecordsTable.tsx","services/DataLoader.tsx","data/Store.tsx","App.tsx","index.tsx"],"names":["useStyles1","makeStyles","theme","createStyles","root","flexShrink","color","palette","text","secondary","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","StyledTableCell","withStyles","head","backgroundColor","common","black","white","body","fontSize","TableCell","useStyles","width","marginTop","table","minWidth","minHeight","tableWrapper","overflowX","RecordsTable","records","React","useState","setPage","setRowsPerPage","selectStringFragment","str","search","searchString","arr","split","length","last","map","value","index","key","style","paginationValues","filter","push","console","log","Paper","padding","margin","onKeyDown","changeSearchString","Table","TableHead","TableRow","align","TableBody","slice","record","caseUid","component","scope","reference","accountId","creationDate","publicId","status","TableFooter","left","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","DataLoader","request","Promise","resolve","fetch","then","response","json","Store","this","indexOf","observable","computed","App","observer","store","bind","load","data","initRecords","filteredRecords","Component","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1697d4e.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles, createStyles, useTheme, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { TablePaginationActionsProps } from './TablePaginationActionsProps';\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(2.5),\n    },\n  }),\n);\n\nexport default function TablePaginationActions(props: TablePaginationActionsProps) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n  function handleFirstPageButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, 0);\n  }\n  function handleBackButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, page - 1);\n  }\n  function handleNextButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, page + 1);\n  }\n  function handleLastPageButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n  return (<div className={classes.root}>\n    <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\n      {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n    </IconButton>\n    <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n      {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n    </IconButton>\n    <IconButton onClick={handleNextButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"next page\">\n      {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n    </IconButton>\n    <IconButton onClick={handleLastPageButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"last page\">\n      {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n    </IconButton>\n  </div>);\n}\n","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePaginationActions from './TablePaginationActions';\nimport RecordData from '../../data/RecordData';\n\nexport const useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(2.5),\n    },\n  }),\n);\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }),\n)(TableCell);\n\nconst useStyles = makeStyles((theme: Theme) =>\ncreateStyles({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n    minHeight:200\n  },\n  tableWrapper: {\n    overflowX: 'auto'\n  },\n}),\n);\n\nexport default function RecordsTable(\n  props: {\n    records:RecordData[], \n    changeSearchString:(event:KeyboardEvent<HTMLInputElement>) =>void,\n    searchString:string\n  }\n    ) {\n  const records = props.records;\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  function handleChangePage(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n    newPage: number,\n  ) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n\n  function selectStringFragment(str:string,search:string = props.searchString){\n    const arr = str.split(search);\n    if (arr.length === 1) return (str);\n    var last:number = arr.length - 1;\n    return (\n      arr.map ((value,index) => \n        <span key={index}>\n          {value}\n          <span style={{color:\"red\"}}>\n            <b>{index < last && search}</b>\n          </span>\n        </span>\n      )\n    )\n  }\n  var paginationValues = [5,10,20,50,100,200,500];\n  paginationValues = paginationValues.filter((value) => value < records.length);\n  paginationValues.push(records.length);\n  console.log(\"paginationValues\", paginationValues); \n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        filter\n        <input \n          style={{padding:2, margin: 10}}\n          onKeyDown={(event:KeyboardEvent<HTMLInputElement>) => props.changeSearchString(event)}\n        />\n        <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>reference</StyledTableCell>\n            <StyledTableCell align=\"left\">caseUid</StyledTableCell>\n            <StyledTableCell align=\"left\">accountId</StyledTableCell>\n            <StyledTableCell align=\"left\">creationDate</StyledTableCell>\n            <StyledTableCell align=\"left\">publicId</StyledTableCell>\n            <StyledTableCell align=\"left\">status</StyledTableCell>\n          </TableRow>\n        </TableHead>\n          <TableBody>\n            {records.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(record => (\n              <TableRow key={record.caseUid}>\n                <TableCell component=\"th\" scope=\"row\" >{selectStringFragment(record.reference)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.caseUid)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.accountId)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.creationDate)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.publicId)}</TableCell>\n                <TableCell align=\"left\">{selectStringFragment(record.status)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableFooter style={{width:\"100%\", left:10}}>\n            <TableRow key=\"pagination\">\n              <TablePagination\n                rowsPerPageOptions={paginationValues}\n                colSpan={3}\n                count={records.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","export default class DataLoader {\n    public static load<T>(request: RequestInfo): Promise<T> {\n        return new Promise((resolve) => {\n            fetch(request)\n            .then(response => response.json())\n            .then(body => {\n                resolve(body);\n            });\n        });\n    };\n}","import RecordData from \"../data/RecordData\";\nimport {observable, computed} from \"mobx\";\n\nexport default class Store {\n  @observable records:RecordData[] = [];\n  \n  @observable searchString:string = \"\";\n\n  init(records:RecordData[]){\n    this.records = records;\n  }\n\n  @computed get filteredRecords():RecordData[] {\n      if (this.searchString === \"\")\n        return this.records;\n\n      return this.records.filter(\n        (record:RecordData, index:number) => \n          record.accountId.indexOf(this.searchString) !== -1 ||\n          record.caseUid.indexOf(this.searchString) !== -1 ||\n          record.creationDate.indexOf(this.searchString) !== -1 ||\n          record.publicId.indexOf(this.searchString) !== -1 ||\n          record.reference.indexOf(this.searchString) !== -1 ||\n          record.status.indexOf(this.searchString) !== -1\n      )\n  } \n}\n","import React, { Component, KeyboardEvent } from \"react\";\nimport './App.css';\nimport RecordsTable from './components/table/RecordsTable';\nimport DataLoader from \"./services/DataLoader\"\nimport RecordData from \"./data/RecordData\";\nimport Store from \"./data/Store\";\nimport {observer} from \"mobx-react\";\nimport {action} from \"mobx\";\n\n@observer\nexport default class App extends Component {\n  store:Store = new Store();\n\n  componentDidMount(){\n    this.changeSearchString = this.changeSearchString.bind(this);\n\n    DataLoader.load<RecordData[]>('testData.json')\n      .then((data:RecordData[]) => this.initRecords(data));  \n  }\n\n  @action initRecords(data:RecordData[]) {\n    this.store.records = data;\n  }\n  \n  @action changeSearchString(event:KeyboardEvent<HTMLInputElement>){\n    if (event && event.key === \"Enter\") {\n      this.store.searchString = (event.target as HTMLInputElement).value;\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">          \n        <header className=\"App-header\">\n           <p>exam-tooth-react-mobx-ts-sc-router-material</p>\n        </header>\n        <RecordsTable \n          records={this.store.filteredRecords}\n          changeSearchString={this.changeSearchString}\n          searchString={this.store.searchString}\n        />\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}