{"version":3,"sources":["components/table/StyledTableCell.tsx","data/RecordData.tsx","components/card/Card.tsx","components/table/TablePaginationActions.tsx","components/table/RecordsTable.tsx","components/login/LoginDialog.tsx","components/login/LoginHeader.tsx","services/DataLoader.tsx","data/TableData.tsx","data/Store.tsx","App.tsx","index.tsx"],"names":["StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","color","palette","common","white","body","fontSize","width","TableCell","RECORD_DATA_KEYS","getRecordProperty","record","key","t","console","log","String","BackLink","to","Button","style","margin","Card","inject","caseUid","this","props","match","params","slice","recordData","store","getRecordsByCaseId","Paper","Table","TableBody","TableRow","map","component","scope","className","Component","useStyles1","makeStyles","root","flexShrink","text","secondary","marginLeft","spacing","TablePaginationActions","classes","useTheme","count","page","rowsPerPage","onChangePage","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","RecordsTable","observer","newPage","tableData","setPage","setRowsPerPage","parseInt","target","value","str","searchString","arr","split","length","last","index","changeSearchString","records","filteredRecords","TextField","variant","fullWidth","id","label","name","autoFocus","onKeyDown","TableHead","align","visibleRecords","selectStringFragment","TableFooter","left","TablePagination","rowsPerPageOptions","paginationValues","colSpan","SelectProps","inputProps","native","handleChangePage","onChangeRowsPerPage","handleChangeRowsPerPage","ActionsComponent","LoginDialog","login","password","state","showPassword","showPasswordCheckBoxOnChange","bind","loginButtonOnClick","checked","setState","saveUser","alert","Container","maxWidth","CssBaseline","Typography","required","onChange","type","FormControlLabel","control","Checkbox","LoginHeader","user","clearUser","React","DataLoader","request","Promise","resolve","fetch","then","response","json","PAGINATION_VALUES_DEFAULT","TableData","maxRaws","start","result","filter","push","observable","action","computed","Store","readUser","load","data","initRecords","initRows","dataLoaded","localStorage","getItem","undefined","setItem","removeItem","find","accountId","indexOf","creationDate","publicId","reference","status","end","App","isLogin","loadData","userName","path","exact","CircularProgress","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9506c855.chunk.js","sourcesContent":["import { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nexport const StyledTableCell = withStyles((theme: Theme) => createStyles({\n  head: {\n    backgroundColor: \"darkblue\",\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14,\n    backgroundColor: \"darkblue\",\n    color: theme.palette.common.white,\n    width:\"50%\"\n  }\n}))(TableCell);\n","export const RECORD_DATA_KEYS = [\n  \"reference\",\n  \"caseUid\",\n  \"accountId\",\n  \"creationDate\",\n  \"publicId\",\n  \"status\",\n];\n\nexport default class RecordData {\n  accountId: string = \"\";\n  caseUid: string = \"\";\n  creationDate: string = \"\";\n  publicId: string = \"\";\n  status: string = \"\";\n  reference: string = \"\";\n  \n}\n\n//HACK\nexport function getRecordProperty(record:RecordData, key:string){\n  var t:any = record;\n  console.log(t[key]);\n  return String(t[key]);\n}\n","import React, { Component } from \"react\";\nimport { CardProps } from \"./CardProps\";\nimport { inject } from \"mobx-react\";\nimport {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Paper,\n  Button\n} from \"@material-ui/core\";\nimport { StyledTableCell } from \"../table/StyledTableCell\";\nimport { RECORD_DATA_KEYS, getRecordProperty } from \"../../data/RecordData\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nfunction BackLink() {\n  return (\n    <Link to=\"/\">\n      <Button style={{ margin: 10 }}>Back to table</Button>\n    </Link>\n  );\n}\n\n@inject(\"store\")\nexport default class Card extends Component<CardProps> {\n  render() {\n    //HACK - remove ':' from matched params\n    var caseUid = this.props.match.params.caseUid!.slice(1);\n    var recordData = this.props.store!.getRecordsByCaseId(caseUid);\n    return recordData ? (\n      <Paper>\n        <BackLink />\n        <Table>\n          <TableBody>\n            <TableRow>\n              {RECORD_DATA_KEYS.map(key => (\n                <TableRow key={key}>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    {key}\n                  </StyledTableCell>\n                  <TableCell scope=\"row\">\n                    {getRecordProperty(recordData, key)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Paper>\n    ) : (\n      <div className=\"App\">\n        <br />\n        Unknown caseUid {caseUid}\n        <br />\n        <BackLink />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  makeStyles,\n  createStyles,\n  useTheme,\n  Theme\n} from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport { TablePaginationActionsProps } from \"./TablePaginationActionsProps\";\n\nconst useStyles1 = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(2.5)\n    }\n  })\n);\n\nexport default function TablePaginationActions(\n  props: TablePaginationActionsProps\n) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n  function handleFirstPageButtonClick(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) {\n    onChangePage(event, 0);\n  }\n  function handleBackButtonClick(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) {\n    onChangePage(event, page - 1);\n  }\n  function handleNextButtonClick(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) {\n    onChangePage(event, page + 1);\n  }\n  function handleLastPageButtonClick(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n","import React, { KeyboardEvent, Component } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { observer, inject } from \"mobx-react\";\nimport { Link } from \"react-router-dom\";\n\nimport TablePaginationActions from \"./TablePaginationActions\";\nimport RecordsTableProps from \"./RecordsTableProps\";\nimport { StyledTableCell } from \"./StyledTableCell\";\nimport RecordData, {\n  RECORD_DATA_KEYS,\n  getRecordProperty\n} from \"../../data/RecordData\";\n\n@inject(\"store\")\n@observer\nexport default class RecordsTable extends Component<RecordsTableProps> {\n  handleChangePage(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null,\n    newPage: number\n  ) {\n    this.props.store!.tableData.setPage(newPage);\n  }\n\n  handleChangeRowsPerPage(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) {\n    this.props.store!.tableData.setRowsPerPage(\n      parseInt(event.target.value, 10)\n    );\n    this.props.store!.tableData.setPage(0);\n  }\n\n  selectStringFragment(\n    str: string,\n    searchString: string = this.props.store!.searchString\n  ) {\n    const arr = str.split(searchString);\n    if (arr.length === 1) return str;\n    var last: number = arr.length - 1;\n    return arr.map((value, index) => (\n      <span key={index}>\n        {value}\n        <span style={{ color: \"darkblue\" }}>\n          <b>{index < last && searchString}</b>\n        </span>\n      </span>\n    ));\n  }\n\n  changeSearchString(event: KeyboardEvent<HTMLInputElement>) {\n    if (event && event.key === \"Enter\") {\n      this.props.store!.changeSearchString(\n        (event.target as HTMLInputElement).value\n      );\n    }\n  }\n\n  render() {\n    //console.log(\"render\");\n    var records = this.props.store!.filteredRecords;\n    return (\n      <Paper>\n        <div>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"search-record\"\n            label=\"SEARCH FILTER [Input and press Enter]\"\n            name=\"search-record\"\n            autoFocus\n            onKeyDown={(event: KeyboardEvent<HTMLInputElement>) =>\n              this.changeSearchString(event)\n            }\n          />\n          <Table>\n            <TableHead>\n              <TableRow>\n                {RECORD_DATA_KEYS.map((key: string) => (\n                  <StyledTableCell align=\"left\" key={key}>\n                    {key}\n                  </StyledTableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody >\n              {this.props.store!.visibleRecords.map((record: RecordData) => (\n                <TableRow key={record.caseUid}>\n                  {RECORD_DATA_KEYS.map((key: string, index: number) => {\n                    return index === 0 ? (\n                      <TableCell component=\"th\" scope=\"row\" key={key}>\n                        <Link to={\"card/:\" + record.caseUid}>\n                          {this.selectStringFragment(\n                            getRecordProperty(record, key)\n                          )}\n                        </Link>\n                      </TableCell>\n                    ) : (\n                      <TableCell align=\"left\">\n                        {this.selectStringFragment(\n                          getRecordProperty(record, key)\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter style={{ width: \"100%\", left: 10 }}>\n              <TableRow key=\"pagination\">\n                <TablePagination\n                  rowsPerPageOptions={\n                    this.props.store!.tableData.paginationValues\n                  }\n                  colSpan={3}\n                  count={records.length}\n                  rowsPerPage={this.props.store!.tableData.rowsPerPage}\n                  page={this.props.store!.tableData.page}\n                  SelectProps={{\n                    inputProps: { \"aria-label\": \"rows per page\" },\n                    native: true\n                  }}\n                  onChangePage={(\n                    event: React.MouseEvent<\n                      HTMLButtonElement,\n                      MouseEvent\n                    > | null,\n                    newPage: number\n                  ) => this.handleChangePage(event, newPage)}\n                  onChangeRowsPerPage={(\n                    event: React.ChangeEvent<\n                      HTMLInputElement | HTMLTextAreaElement\n                    >\n                  ) => this.handleChangeRowsPerPage(event)}\n                  ActionsComponent={TablePaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </div>\n      </Paper>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nimport LoginDialogProps from \"./LoginDialogProps\";\nimport LoginDialogState from \"./LoginDialogState\";\nimport { inject } from \"mobx-react\";\n\n@inject(\"store\")\nexport default class LoginDialog extends Component<\n  LoginDialogProps,\n  LoginDialogState\n> {\n  // TODO may be move to context or state?\n  login: string = \"\";\n  password: string = \"\";\n\n  constructor(props: LoginDialogProps) {\n    super(props);\n    this.state = { showPassword: false };\n    this.showPasswordCheckBoxOnChange = this.showPasswordCheckBoxOnChange.bind(\n      this\n    );\n    this.loginButtonOnClick = this.loginButtonOnClick.bind(this);\n  }\n\n  showPasswordCheckBoxOnChange(\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) {\n    this.setState({ showPassword: checked });\n  }\n\n  loginButtonOnClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    //SIMULATE SERVER CHECK\n    if (this.login === \"root\" && this.password === \"admin\") {\n      this.props.store!.saveUser(this.login);\n    } else {\n      alert(\"login/password incorrect\");\n    }\n  }\n\n  render() {\n    return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className=\"App\">\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <div>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"current-login\"\n              label=\"login\"\n              name=\"current-login\"\n              autoFocus\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                (this.login = event.target.value)\n              }\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type={this.state.showPassword ? \"input\" : \"password\"}\n              id=\"password\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                (this.password = event.target.value)\n              }\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  value=\"showPasswordCheckBox\"\n                  color=\"primary\"\n                  onChange={this.showPasswordCheckBoxOnChange}\n                />\n              }\n              label=\"Show password\"\n            />\n            <Button\n              id=\"loginButton\"\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.loginButtonOnClick}\n            >\n              Login\n            </Button>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport LoginHeaderProps from \"./LoginHeaderProps\";\nimport { Button } from \"@material-ui/core\";\nimport { inject } from \"mobx-react\";\n\n@inject(\"store\")\nexport default class LoginHeader extends React.Component<LoginHeaderProps> {\n  render() {\n    return (\n      <div className=\"login-header-container App-header\">\n        <div className=\"user-name\">\n          <p>You logged as {this.props.store!.user}</p>\n        </div>\n        <div className=\"logout\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>\n              this.props.store!.clearUser()\n            }\n          >\n            Logout\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","export default class DataLoader {\n    public static load<T>(request: RequestInfo): Promise<T> {\n        return new Promise((resolve) => {\n            fetch(request)\n            .then(response => response.json())\n            .then(body => {\n                resolve(body);\n            });\n        });\n    };\n}","import { observable, computed, action } from \"mobx\";\n\nconst PAGINATION_VALUES_DEFAULT = [5, 10, 25, 50, 100, 200, 500];\n\nexport default class TableData {\n  @observable page: number = 0;\n  @observable rowsPerPage: number = 0;\n  maxRaws = 0;\n\n  @action setPage(page: number) {\n    this.page = page;\n  }\n  @action setRowsPerPage(rowsPerPage: number) {\n    this.rowsPerPage = rowsPerPage;\n  }\n\n  @computed get start() {\n    return this.page * this.rowsPerPage;\n  }\n\n  @computed get end() {\n    return this.start + this.rowsPerPage;\n  }\n\n  @action initRows() {\n    this.setPage(0);\n    this.setRowsPerPage(this.paginationValues[0]);\n  }\n\n  @computed get paginationValues(): number[] {\n    let result = PAGINATION_VALUES_DEFAULT.filter(\n      value => value < this.maxRaws\n    );\n    result.push(this.maxRaws);\n    return result;\n  }\n}\n","import RecordData from \"../data/RecordData\";\nimport { observable, computed, action } from \"mobx\";\nimport DataLoader from \"../services/DataLoader\";\nimport TableData from \"./TableData\";\n\nexport default class Store {\n  @observable records: RecordData[] = [];\n  @observable searchString: string = \"\";\n  @observable tableData: TableData = new TableData();\n  @observable dataLoaded = false;\n  @observable user?:string;\n\n  constructor(){\n    this.readUser();\n  }\n\n  loadData() {\n    DataLoader.load<RecordData[]>(\"/testData.json\").then((data: RecordData[]) =>\n      this.initRecords(data)\n    );\n  }\n\n  @action initRecords(records: RecordData[]) {\n    this.records = records;\n    this.tableData.maxRaws = this.records.length;\n    this.tableData.initRows();\n    this.dataLoaded = true;\n  }\n\n  @action changeSearchString(searchString: string) {\n    this.searchString = searchString;\n  }\n\n  @computed get isLogin() {\n    return this.user !== undefined;\n  }\n\n  @observable readUser() {\n    this.user = localStorage.getItem(\"user\") || undefined;\n  }\n\n  @action saveUser(user: string) {\n    localStorage.setItem(\"user\", user);\n    this.readUser();\n  }\n\n  @action clearUser() {\n    localStorage.removeItem(\"user\");\n    this.readUser();\n  }\n\n  @computed get filteredRecords(): RecordData[] {\n    if (this.searchString === \"\") return this.records;\n\n    let result = this.records.filter(\n      (record: RecordData, index: number) =>\n        record.accountId.indexOf(this.searchString) !== -1 ||\n        record.caseUid.indexOf(this.searchString) !== -1 ||\n        record.creationDate.indexOf(this.searchString) !== -1 ||\n        record.publicId.indexOf(this.searchString) !== -1 ||\n        record.reference.indexOf(this.searchString) !== -1 ||\n        record.status.indexOf(this.searchString) !== -1\n    );\n    this.tableData.maxRaws = result.length;\n    return result;\n  }\n\n  @computed get visibleRecords(): RecordData[] {\n    let result = this.filteredRecords.slice(\n      this.tableData.start,\n      this.tableData.end\n    );\n    return result;\n  }\n\n  getRecordsByCaseId(caseUid: string): RecordData | undefined {\n    let result = this.records.find(\n      (record: RecordData) => record.caseUid === caseUid\n    );\n    return result;\n  }\n}\n","import { observer, Provider } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport Card from \"./components/card/Card\";\nimport RecordsTable from \"./components/table/RecordsTable\";\nimport LoginDialog from \"./components/login/LoginDialog\";\nimport LoginHeader from \"./components/login/LoginHeader\";\nimport Store from \"./data/Store\";\n\nimport \"./App.css\";\n\n@observer\nexport default class App extends Component {\n  store: Store = new Store();\n\n  componentDidMount() {\n    if (this.store.isLogin) this.store.loadData();\n  }\n\n  render() {\n    return this.store.isLogin ? (\n      this.store.dataLoaded ? (\n        <div>\n          <Provider store={this.store}>\n            <LoginHeader userName={this.store.user} />\n            <Router>\n              <Switch>\n                <Route path=\"/\" exact component={RecordsTable} />\n                <Route path=\"/card/:caseUid\" exact component={Card} />\n                <Route component={RecordsTable} />\n              </Switch>\n            </Router>\n          </Provider>\n        </div>\n      ) : (\n        <div id=\"loading\" className=\"App\">\n          <CircularProgress size=\"100px\" />\n          <div>loading data</div>\n        </div>\n      )\n    ) : (\n      <Provider store={this.store}>\n        <LoginDialog />\n      </Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}